from django.shortcuts import get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import BlogTag, Blog
from .serializers import BlogTagSerializer, BlogSerializer
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.authentication import SessionAuthentication
from rest_framework import generics
from user.models import UserAuth
from common.views import CustomJWTAuthentication


class BlogTagListCreateView(APIView):
    authentication_classes = []  # ✅ disables JWT/global auth
    permission_classes = [AllowAny]  # ✅ allow all requests

    def get(self, request):
        tags = BlogTag.objects.all()
        serializer = BlogTagSerializer(tags, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request):
        serializer = BlogTagSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()  # slug will be auto-generated by model save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    

class BlogTagDetailView(generics.DestroyAPIView):
    queryset = BlogTag.objects.all()
    serializer_class = BlogTagSerializer
    authentication_classes = []  # allow unauthenticated requests
    permission_classes = [AllowAny]
    

class BlogListCreateAPIView(APIView):
    authentication_classes = [CustomJWTAuthentication]
    permission_classes = [IsAuthenticated]

    def get(self, request):
        blogs = Blog.objects.all().defer('content').order_by('-created_at')
        serializer = BlogSerializer(blogs, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request):
        user = request.user
        serializer = BlogSerializer(data=request.data)
        if serializer.is_valid():
            try:
                custom_user = UserAuth.objects.get(id=user.id)
            except UserAuth.DoesNotExist:
                return Response({"Error": "User not found in UserAuth."}, status=400)

            # get display name depending on profile type
            if hasattr(user, 'profile'):
                author_name = user.profile.name
            elif hasattr(user, 'admin_profile'):
                author_name = user.admin_profile.full_name
            else:
                author_name = 'Unknown'

            # print("Auth Type from Token:", getattr(user, 'auth_type_from_token', 'N/A'))

            serializer.save(user=custom_user, author=author_name)
            return Response(serializer.data, status=status.HTTP_201_CREATED)

        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class BlogDetailAPIView(APIView):
    authentication_classes = []  # ✅ disables JWT/global auth
    permission_classes = [AllowAny]  # ✅ allow all requests

    def get_object(self, pk):
        return get_object_or_404(Blog, pk=pk)

    def get(self, request, pk):
        blog = self.get_object(pk)
        serializer = BlogSerializer(blog)
        return Response(serializer.data)

    def put(self, request, pk):
        blog = self.get_object(pk)
        serializer = BlogSerializer(blog, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        blog = self.get_object(pk)
        blog.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class BlogsImagesAPIView(APIView):
    authentication_classes = []  # ✅ disables JWT/global auth
    permission_classes = [AllowAny]  # ✅ allow all requests

    def get(self, request):
        pass

    def post(self, request):
        pass

    def delete(self, request):
        pass

